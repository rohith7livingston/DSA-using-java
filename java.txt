==================================================                ==================================================
               DATA TYPES IN JAVA                                   DATA TYPES IN PYTHON
==================================================                ==================================================

Primitive Types                                                Built-in Types
---------------                                                ----------------
‚Üí boolean                                                      ‚Üí bool

‚Üí number                                                       ‚Üí int
   ‚îî‚îÄ‚îÄ> Integer                                                ‚Üí float
   ‚îî‚îÄ‚îÄ> Floating Point                                         ‚Üí complex

‚Üí char                                                         ‚Üí str (single character is a string of length 1)
   - Unicode code as integer                                   - Strings are Unicode by default

--------------------------------------------------              --------------------------------------------------
Note:                                                          Note:
Java handles I/O as byte or character streams.                 Python uses dynamic typing, no need to declare.
These are converted into specific types.                       Input is typically taken using input().
--------------------------------------------------              --------------------------------------------------





==================================================                ==================================================
        JAVA CLASSES THAT HANDLE INPUT                           PYTHON I/O METHODS
==================================================                ==================================================

[ Scanner ]                                                    [ input() ]
 - Reads keyboard input                                        - Reads user input as string
 - java.util package                                           - Cast to int/float if needed
 - Constructor: Scanner(InputStream)                           Example: x = int(input("Enter a number: "))

 - Methods:                                                    - No direct equivalent to nextInt(), nextLine()
     ‚Ä¢ next()        ‚Üí next token                              - Split input if needed using split()
     ‚Ä¢ nextLine()    ‚Üí full line
     ‚Ä¢ nextInt()     ‚Üí next int
     ‚Ä¢ nextChar()    ‚Üí workaround with charAt(0)

[ BufferedReader ]                                             [ sys.stdin ]
 - Efficient text input                                        - For faster or bulk input
 - Needs InputStreamReader                                     import sys

[ Console ]                                                    [ getpass.getpass() ]
 - Secure input                                                - For secure password input

[ InputStreamReader ]                                          [ open() for files ]
 - Converts byte stream ‚Üí char stream                          - Files can be read in binary or text mode






==================================================                ==================================================
            OOPS - CLASS CONCEPT                                       OOPS - CLASS CONCEPT
==================================================                ==================================================

A Class is like a 3-Compartment Box:                         A Class is a template for creating objects

    +----------------------------+                                +----------------------------+
    |          CLASS             |                                |          CLASS             |
    +----------------------------+                                +----------------------------+
    |  1. Name                   |                                |  1. Class Name             |
    |  2. Static Attributes      |                                |  2. Attributes             |
    |     (Fields / Variables)   |                                 |  3. Methods                |
    |  3. Dynamic Behaviour      |                                +----------------------------+
    |     (Methods / Functions)  |
    +----------------------------+

Java Example:                                                  Python Example:
------------------                                             ------------------
class Student {                                                class Student:
    String name;                                                  def __init__(self, name):
    int speed;                                                        self.name = name

    String getName() {                                            def get_name(self):
        return name;                                                  return self.name
    }
}

Visibility Modifiers:                                          Python uses naming conventions:
- private    ‚Üí -:                                              ‚Ä¢ _name  ‚Üí protected (by convention)
- protected  ‚Üí #:                                              ‚Ä¢ __name ‚Üí private (name mangling)
- public     ‚Üí + or o                                          ‚Ä¢ name   ‚Üí public (default)
- default    ‚Üí (no symbol)                                     ‚Ä¢ No enforced access control
                                                                __init__ 

--------------------------------------------------              --------------------------------------------------



=========================================================     =========================================================
               DATA ENCAPSULATION IN JAVA                           DATA ENCAPSULATION IN PYTHON
=========================================================     =========================================================

üîí Definition:                                                üîí Definition:
Encapsulation is the concept of wrapping data (variables)    Encapsulation means restricting direct access to object
and methods into a single unit (a class) and restricting     attributes and using methods (getters/setters) to access them.
direct access from outside the class.

---------------------------------------------------------     ---------------------------------------------------------

üîê Achieved Using:                                            üîê Achieved Using:
- Access modifiers (`private`, `public`, `protected`)        - Naming conventions with underscores:
- Getters and Setters                                          ‚Ä¢ `_name` ‚Üí protected (convention)
                                                               ‚Ä¢ `__name` ‚Üí private (name mangling)
                                                               ‚Ä¢ `name`   ‚Üí public

---------------------------------------------------------     ---------------------------------------------------------

üß± Java Example:                                               üêç Python Example:
---------------------------------------------------------     ---------------------------------------------------------
class Student {                                               class Student:
    private String name;                                         def __init__(self):
    private int age;                                                 self.__name = "John"
                                                                     self.__age = 18

    // Getter                                                     def get_name(self):
    public String getName() {                                         return self.__name;
        return name;                                              def set_name(self, new_name):
    }                                                                self.__name = new_name

    // Setter
    public void setName(String n) {
        this.name = n;
    }
}

Student s = new Student();                                   s = Student()
s.setName("Alice");                                           s.set_name("Alice")
System.out.println(s.getName());                             print(s.get_name())

---------------------------------------------------------     ---------------------------------------------------------

üîç Summary:                                                  üîç Summary:
- Java uses access modifiers to fully enforce               - Python relies on naming conventions; access isn't strictly
  encapsulation.                                               enforced but respected by convention.

- Private fields cannot be accessed directly.               - Double underscore leads to name mangling (makes it harder
                                                               to access directly, but still possible).

=========================================================     =========================================================


=========================================================     =========================================================
            DATA ABSTRACTION IN PYTHON                              DATA ABSTRACTION IN JAVA
=========================================================     =========================================================

üß† What is Abstraction?                                       üß† What is Abstraction?
Abstraction is the process of hiding complex                  Abstraction hides internal details and exposes
implementation details and showing only                      only essential features of an object.
the essential functionalities.

---------------------------------------------------------     ---------------------------------------------------------

üîê How it's done in Python:                                   üîê How it's done in Java:
- Using the `abc` module                                      - Using `abstract` classes and `interfaces`
- `@abstractmethod` decorator                                 - `abstract` keyword

---------------------------------------------------------     ---------------------------------------------------------

üß± Python Example:                                             üß± Java Example:
---------------------------------------------------------     ---------------------------------------------------------
from abc import ABC, abstractmethod                         abstract class Animal {
                                                               abstract void sound();

class Animal(ABC):                                             void sleep() {
    @abstractmethod                                                 System.out.println("Sleeping...");
    def sound(self):                                                }
        pass                                                   }

class Dog(Animal):                                           class Dog extends Animal {
    def sound(self):                                             void sound() {
        print("Barks")                                               System.out.println("Barks");
                                                               }
d = Dog()                                                   }

d.sound()      # Output: Barks                              public class Main {
                                                           public static void main(String[] args) {
                                                               Animal d = new Dog();
                                                               d.sound();  // Output: Barks
                                                           }}

---------------------------------------------------------     ---------------------------------------------------------

üìå Summary:                                                  üìå Summary:
- Python uses abstract base classes from `abc`              - Java uses abstract classes and interfaces
  module to enforce abstraction.                              to enforce abstraction.

- Cannot instantiate an abstract class.                     - Cannot instantiate an abstract class.

=========================================================     =========================================================

11-07-2025
=========================================================     =========================================================
               STATIC VS NON-STATIC (JAVA)                         STATIC VS NON-STATIC (PYTHON)
=========================================================     =========================================================

üß† Concept:                                                  üß† Concept:
- `static` members belong to the class.                     - Python class variables act like static variables.
- Non-static members belong to objects (instances).         - Instance variables are per object.

---------------------------------------------------------     ---------------------------------------------------------

üîÅ Shared vs Unique:                                         üîÅ Shared vs Unique:
- Static members are shared across all instances.           - Class variables are shared across all instances.
- Non-static members are unique to each instance.           - Instance variables differ per object.

---------------------------------------------------------     ---------------------------------------------------------

üß± Java Example:                                             üêç Python Example:
---------------------------------------------------------     ---------------------------------------------------------
class Student {
    static int count = 0;
    String name;

    Student(String name) {
        this.name = name;
        count++;
    }
}

System.out.println(Student.count);                          class Student:
                                                                count = 0  # Class variable

                                                            def __init__(self, name):
                                                                self.name = name
                                                                Student.count += 1

print(Student.count)

---------------------------------------------------------     ---------------------------------------------------------

üìå Summary:                                                  üìå Summary:
- `static` keyword defines shared class-level members.      - Class variables behave like Java statics.
- Access using ClassName.member                             - Access using ClassName.member

=========================================================     =========================================================
                         CONSTRUCTORS                                         CONSTRUCTORS
=========================================================     =========================================================

üõ†Ô∏è What is a Constructor?                                  üõ†Ô∏è What is a Constructor?
- Special method invoked when an object is created.         - Special method: `__init__()` initializes object attributes.

---------------------------------------------------------     ---------------------------------------------------------

üß± Java Example:                                             üêç Python Example:
---------------------------------------------------------     ---------------------------------------------------------
class Student {
    String name;

    // Constructor
    Student(String n) {
        name = n;
    }
}

Student s = new Student("Alice");                           class Student:
                                                                def __init__(self, name):
                                                                    self.name = name

                                                            s = Student("Alice")

---------------------------------------------------------     ---------------------------------------------------------

üìå Summary:                                                  üìå Summary:
- Java constructors have the same name as the class.        - Python uses `__init__` for constructors.
- No return type (not even void).                           - `__init__()` is automatically called on object creation.

static is run time Binidng or compile time Binidng
--> are binded at compile time

is java supports multiple inheritance directly or indirectly



=========================================================     =========================================================
                    INHERITANCE IN JAVA                                INHERITANCE IN PYTHON
=========================================================     =========================================================

üß† What is Inheritance?                                    üß† What is Inheritance?
Allows a class to inherit properties                       Allows a class to inherit attributes and
and methods from another class.                            methods from another class.

Supports code reuse and hierarchy.                         Promotes reusability and modularity.

---------------------------------------------------------     ---------------------------------------------------------

üìå Terminology:                                              üìå Terminology:
Superclass  ‚Üí Parent class                                  Base class  ‚Üí Parent class  
Subclass    ‚Üí Child class                                   Derived class ‚Üí Child class

---------------------------------------------------------     ---------------------------------------------------------

üß± Java Syntax:                                              üß± Python Syntax:
---------------------------------------------------------     ---------------------------------------------------------
class Parent {                                              class Parent:
    void greet() {                                              def greet(self):
        System.out.println("Hello from Parent");                    print("Hello from Parent");
    }                                                         

}                                                           class Child(Parent):
                                                               def greet_child(self):
class Child extends Parent {                                       print("Hello from Child");
    void greetChild() {
        System.out.println("Hello from Child");
    }
}

public class Main {
    public static void main(String[] args) {
        Child obj = new Child();
        obj.greet();         // inherited
        obj.greetChild();    // own
    }
}                                                           obj = Child()
                                                            obj.greet()         # inherited
                                                            obj.greet_child()   # own

---------------------------------------------------------     ---------------------------------------------------------

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Types of Inheritance:                                  üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Types of Inheritance:
---------------------------------------------------------     ---------------------------------------------------------
1. Single Inheritance                                       1. Single Inheritance
2. Multilevel Inheritance                                   2. Multilevel Inheritance
3. Hierarchical Inheritance                                 3. Hierarchical Inheritance
4. Hybrid (via interfaces)                                  4. Multiple Inheritance
                                                            5. Hybrid Inheritance

üî¥ Java does **not** support multiple inheritance            ‚úÖ Python supports multiple inheritance
   using classes (only via interfaces).                        directly with MRO (Method Resolution Order).

---------------------------------------------------------     ---------------------------------------------------------

üìù Multiple Inheritance (Java ‚Üí via interfaces)             üìù Multiple Inheritance (Python)
---------------------------------------------------------     ---------------------------------------------------------
interface A {                                               class A:
    void methodA();                                             def showA(self):
                                                                    print("From A")

interface B {                                               class B:
    void methodB();                                             def showB(self):
                                                                    print("From B")

class C implements A, B {                                   class C(A, B):
    public void methodA() {                                     pass
        System.out.println("A");
    }

    public void methodB() {
        System.out.println("B");
    }
}

C obj = new C();                                            obj = C()
obj.methodA();                                              obj.showA()
obj.methodB();                                              obj.showB()

---------------------------------------------------------     ---------------------------------------------------------

‚úÖ Summary:                                                 ‚úÖ Summary:
- Java uses `extends` for single inheritance               - Python supports multiple inheritance directly.
- Multiple inheritance is achieved via `interfaces`.       - Python uses MRO to resolve method conflicts.
- Promotes clean, modular design.                          - Flexible but must be used carefully.

=========================================================     =========================================================


NESTED Try Catch::



Array:
without array the maintanence of the programe becomes un predictable


Jagged arrays




skeleton class

i,j = map(int,input().split())





dead Lock

1.philoshper
2.producer-consumer problem

in data base too many transactions try to access the data
no exclusive no preamption
synchronization leads to deadlock


JDBC

